/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import inwestujacy.Inwestor;
import org.jdesktop.observablecollections.ObservableList;
import projekt.Swiat;

/**
 *
 * @author Monika Zielińska
 */
public class PanelInwestorzy extends javax.swing.JPanel {
    
    private ObservableList<Inwestor> inwestorzy;
    
    /**
     * Creates new form OknoAktywa
     */
    public PanelInwestorzy() {
        inwestorzy = Swiat.listaInwestorow;
        initComponents();
        usunInwestoraPrzycisk.setEnabled(false);
        informacjePanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        dodajInwestoraPrzycisk = new javax.swing.JButton();
        usunInwestoraPrzycisk = new javax.swing.JButton();
        listaInwestorzyScrollPane = new javax.swing.JScrollPane();
        inwestorzyList = new javax.swing.JList<>();
        listaInwestorzyLabel = new javax.swing.JLabel();
        informacjePanel = new javax.swing.JPanel();
        informacjeLabel = new javax.swing.JLabel();
        nazwiskoTextField = new javax.swing.JTextField();
        peselTextField = new javax.swing.JTextField();
        budzetTextField = new javax.swing.JTextField();
        nazwiskoLabel = new javax.swing.JLabel();
        peselLabel = new javax.swing.JLabel();
        budzetLabel = new javax.swing.JLabel();
        imieLabel = new javax.swing.JLabel();
        imieTextField = new javax.swing.JTextField();
        posiadaneAktywaScrollPane = new javax.swing.JScrollPane();
        posiadaneAktywaList = new javax.swing.JList<>();
        posiadaneAktywaLabel = new javax.swing.JLabel();

        dodajInwestoraPrzycisk.setText("Dodaj inwestora");
        dodajInwestoraPrzycisk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajInwestoraPrzyciskActionPerformed(evt);
            }
        });

        usunInwestoraPrzycisk.setText("Usuń inwestora");
        usunInwestoraPrzycisk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usunInwestoraPrzyciskActionPerformed(evt);
            }
        });

        inwestorzyList.setInheritsPopupMenu(true);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${inwestorzy}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, inwestorzyList);
        bindingGroup.addBinding(jListBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${inwestor}"), inwestorzyList, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        inwestorzyList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                inwestorzyListPropertyChange(evt);
            }
        });
        inwestorzyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                inwestorzyListValueChanged(evt);
            }
        });
        listaInwestorzyScrollPane.setViewportView(inwestorzyList);

        listaInwestorzyLabel.setText("Wybierz inwestora:");

        informacjeLabel.setText("Informacje i edycja:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${inwestor.nazwisko}"), nazwiskoTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${inwestor.pesel}"), peselTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        budzetTextField.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${inwestor.budzet}"), budzetTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        nazwiskoLabel.setText("Nazwisko:");

        peselLabel.setText("Pesel:");

        budzetLabel.setText("Budżet:");

        imieLabel.setText("Imię:");

        imieTextField.setToolTipText("");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${inwestor.imie}"), imieTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${inwestor.listaPosiadanychAktywow}");
        jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, posiadaneAktywaList);
        bindingGroup.addBinding(jListBinding);

        posiadaneAktywaScrollPane.setViewportView(posiadaneAktywaList);

        posiadaneAktywaLabel.setText("Lista posiadanych aktywów:");

        javax.swing.GroupLayout informacjePanelLayout = new javax.swing.GroupLayout(informacjePanel);
        informacjePanel.setLayout(informacjePanelLayout);
        informacjePanelLayout.setHorizontalGroup(
            informacjePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informacjePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informacjePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(informacjePanelLayout.createSequentialGroup()
                        .addGroup(informacjePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(imieLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nazwiskoLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(budzetLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(peselLabel, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addGroup(informacjePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(imieTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, informacjePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(budzetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(peselTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nazwiskoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(posiadaneAktywaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(informacjePanelLayout.createSequentialGroup()
                        .addGroup(informacjePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(informacjeLabel)
                            .addComponent(posiadaneAktywaLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
        );
        informacjePanelLayout.setVerticalGroup(
            informacjePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informacjePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(informacjeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informacjePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imieTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imieLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informacjePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nazwiskoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nazwiskoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informacjePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peselLabel)
                    .addComponent(peselTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informacjePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(budzetLabel)
                    .addComponent(budzetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(posiadaneAktywaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(posiadaneAktywaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(dodajInwestoraPrzycisk, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                        .addComponent(listaInwestorzyScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(usunInwestoraPrzycisk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(listaInwestorzyLabel))
                .addGap(30, 30, 30)
                .addComponent(informacjePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listaInwestorzyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaInwestorzyScrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dodajInwestoraPrzycisk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usunInwestoraPrzycisk)
                .addGap(30, 30, 30))
            .addComponent(informacjePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void dodajInwestoraPrzyciskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajInwestoraPrzyciskActionPerformed
        Swiat.stworzInwestor();
        inwestorzyList.setSelectedIndex(inwestorzyList.getLastVisibleIndex());
    }//GEN-LAST:event_dodajInwestoraPrzyciskActionPerformed

    private void usunInwestoraPrzyciskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usunInwestoraPrzyciskActionPerformed
        if(inwestorzyList.getSelectedIndex() == -1) return;
        inwestor.usunInwestujacy();
        usunInwestoraPrzycisk.setEnabled(false);
    }//GEN-LAST:event_usunInwestoraPrzyciskActionPerformed

    private void inwestorzyListPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_inwestorzyListPropertyChange

    }//GEN-LAST:event_inwestorzyListPropertyChange

    private void inwestorzyListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_inwestorzyListValueChanged
        if(inwestorzyList.getSelectedIndex() != -1) {
            usunInwestoraPrzycisk.setEnabled(true);
            informacjePanel.setVisible(true);
        }
        else informacjePanel.setVisible(false);
    }//GEN-LAST:event_inwestorzyListValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel budzetLabel;
    private javax.swing.JTextField budzetTextField;
    private javax.swing.JButton dodajInwestoraPrzycisk;
    private javax.swing.JLabel imieLabel;
    private javax.swing.JTextField imieTextField;
    private javax.swing.JLabel informacjeLabel;
    private javax.swing.JPanel informacjePanel;
    private javax.swing.JList<String> inwestorzyList;
    private javax.swing.JLabel listaInwestorzyLabel;
    private javax.swing.JScrollPane listaInwestorzyScrollPane;
    private javax.swing.JLabel nazwiskoLabel;
    private javax.swing.JTextField nazwiskoTextField;
    private javax.swing.JLabel peselLabel;
    private javax.swing.JTextField peselTextField;
    private javax.swing.JLabel posiadaneAktywaLabel;
    private javax.swing.JList<String> posiadaneAktywaList;
    private javax.swing.JScrollPane posiadaneAktywaScrollPane;
    private javax.swing.JButton usunInwestoraPrzycisk;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @return
     */
    public ObservableList<Inwestor> getInwestorzy() {
        return inwestorzy;
    }

    /**
     *
     * @param inwestorzy
     */
    public void setInwestorzy(ObservableList<Inwestor> inwestorzy) {
        this.inwestorzy = inwestorzy;
    }

       private Inwestor inwestor;

    /**
     *
     */
    public static final String PROP_INWESTOR = "inwestor";

    /**
     * Get the value of inwestor
     *
     * @return the value of inwestor
     */
    public Inwestor getInwestor() {
        return inwestor;
    }

    /**
     * Set the value of inwestor
     *
     * @param inwestor new value of inwestor
     */
    public void setInwestor(Inwestor inwestor) {
        Inwestor oldInwestor = this.inwestor;
        this.inwestor = inwestor;
        firePropertyChange(PROP_INWESTOR, oldInwestor, inwestor);
    }
    
    
    
}
