/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import aktywa.Akcja;
import aktywa.Aktywa;
import aktywa.Surowiec;
import java.awt.BorderLayout;
import java.awt.Color;
import java.util.List;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import java.awt.MouseInfo;
import org.jfree.chart.axis.NumberAxis;
import rynki.Gielda;

/**
 *
 * @author Monika Zielińska
 */
public class Wykres extends javax.swing.JFrame {
    
    /**
     * Tworzy wykres zmiany wartości aktywa w czasie
     * @param aktywo
     */
    public Wykres(Aktywa aktywo) {
        initComponents();
        DefaultCategoryDataset daneWykresu = new DefaultCategoryDataset();
        Integer  i = aktywo.getMomentPowstania();
        for (Double  wartosc : aktywo.getListaWartosci()) {
                daneWykresu.setValue(wartosc, "", i );
                i++;
        }
        
        String waluta = "USD";
        if(aktywo.getClass() == Surowiec.class) {
            Surowiec s = (Surowiec)aktywo;
            waluta = s.getWaluta().getNazwa();
        }
        else if(aktywo.getClass() == Akcja.class) {
            Akcja a = (Akcja)aktywo;
            Gielda g = (Gielda) a.getRynek();
            waluta = g.getWaluta().getNazwa();
        }
        
        JFreeChart chart = ChartFactory.createLineChart(
            "Wartość " + aktywo + " w czasie", 
            "czas", "wartość w "+waluta, 
            daneWykresu,PlotOrientation.VERTICAL,
            false, false, false);

        CategoryPlot plot = chart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.BLACK);
        NumberAxis range = (NumberAxis) plot.getRangeAxis();
        double wartMax = aktywo.getWartoscMax();
        double wartMin = aktywo.getWartoscMin();
        if(wartMax != wartMin) {
            range.setRange(wartMin,wartMax);
        }

        ChartPanel chartPanel = new ChartPanel(chart);
        wykresPanel.removeAll();
        wykresPanel.add(chartPanel, BorderLayout.CENTER);
        wykresPanel.validate();
        wykresPanel.repaint();
    }
    
    /**
     * Tworzy wykres wartości wielu aktywów w ujęciu procentowym 
     * @param listaAktyw
     */
    public Wykres(List <Aktywa> listaAktyw) {
        initComponents();     
        double wartMin = 1, wartMax = 1;
        DefaultCategoryDataset daneWykresu = new DefaultCategoryDataset();
        for (Aktywa aktywo : listaAktyw) {
            
            Integer i = aktywo.getMomentPowstania();
            double wartPoczatkowa = aktywo.getListaWartosci().get(0);
            for (Double  wartosc : aktywo.getListaWartosci()) {
                double procentowo = wartosc/wartPoczatkowa;
                wartMin = Math.min(wartMin, procentowo);
                wartMax = Math.max(wartMax, procentowo);
                daneWykresu.setValue(
                        procentowo, 
                        aktywo.getNazwa(), i );
                i++;
            }
            
        }
        
            JFreeChart chart = ChartFactory.createLineChart(
                    "Wartości aktyw w czasie", 
                    "czas", "wartość w ujęciu procentowym", 
                    daneWykresu,
                    PlotOrientation.VERTICAL,
                    true, false, false);

            CategoryPlot plot = chart.getCategoryPlot();
            plot.setRangeGridlinePaint(Color.BLACK);
            NumberAxis range = (NumberAxis) plot.getRangeAxis();
            if(wartMax != wartMin) {
                range.setRange(wartMin, wartMax);
            }
            
            ChartPanel chartPanel = new ChartPanel(chart);
            wykresPanel.removeAll();
            wykresPanel.add(chartPanel, BorderLayout.CENTER);
            wykresPanel.validate();
            wykresPanel.repaint();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wykresPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        setMinimumSize(new java.awt.Dimension(400, 300));
        setResizable(false);

        wykresPanel.setMinimumSize(new java.awt.Dimension(400, 300));
        wykresPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(wykresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(680, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(wykresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(422, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel wykresPanel;
    // End of variables declaration//GEN-END:variables
}
